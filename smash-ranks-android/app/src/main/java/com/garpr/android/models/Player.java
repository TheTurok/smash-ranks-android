package com.garpr.android.models;


import android.os.Parcel;
import android.os.Parcelable;

import com.garpr.android.misc.Constants;
import com.garpr.android.misc.ListUtils.AlphabeticallyComparable;
import com.garpr.android.misc.Utils;
import com.garpr.android.settings.Settings;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Comparator;


public class Player implements AlphabeticallyComparable, Parcelable {


    private final float mRating;
    private final int mRank;
    private final String mId;
    private final String mName;
    private String mWebUrl;
    private final String mRatingTruncated;




    public Player(final JSONObject json) throws JSONException {
        mId = Utils.getJSONString(json, Constants.OPPONENT_ID, Constants.ID);
        mName = Utils.getJSONString(json, Constants.OPPONENT_NAME, Constants.NAME);
        mRating = (float) json.optDouble(Constants.RATING, Float.MIN_VALUE);
        mRank = json.optInt(Constants.RANK, Integer.MIN_VALUE);
        mRatingTruncated = String.format("%.3f", mRating);
    }


    public Player(final String id, final String name) {
        mId = id;
        mName = name;
        mRating = Float.MIN_VALUE;
        mRank = Integer.MIN_VALUE;
        mRatingTruncated = null;
    }


    private Player(final Parcel source) {
        mRating = source.readFloat();
        mRank = source.readInt();
        mId = source.readString();
        mName = source.readString();
        mWebUrl = source.readString();
        mRatingTruncated = source.readString();
    }


    @Override
    public boolean equals(final Object o) {
        final boolean isEqual;

        if (this == o) {
            isEqual = true;
        } else if (o instanceof Player) {
            final Player p = (Player) o;
            isEqual = mId.equals(p.getId()) && mName.equals(p.getName());
        } else {
            isEqual = false;
        }

        return isEqual;
    }


    @Override
    public char getFirstCharOfName() {
        return mName.charAt(0);
    }


    public String getId() {
        return mId;
    }


    public String getName() {
        return mName;
    }


    public int getRank() {
        return mRank;
    }


    public float getRating() {
        return mRating;
    }


    public String getRatingTruncated() {
        return mRatingTruncated;
    }


    public String getWebUrl() {
        if (!Utils.validStrings(mWebUrl)) {
            final Region region = Settings.Region.get();
            final String regionName = region.getName().toLowerCase();
            mWebUrl = Constants.WEB_URL + regionName + '/' + Constants.PLAYERS + '/' + mId;
        }

        return mWebUrl;
    }


    public boolean hasCompetitionValues() {
        return mRank != Integer.MIN_VALUE && mRating != Float.MIN_VALUE;
    }


    @Override
    public int hashCode() {
        // this method was automatically generated by Android Studio

        int result = (mRating != +0.0f ? Float.floatToIntBits(mRating) : 0);
        result = 31 * result + mRank;
        result = 31 * result + mId.hashCode();
        result = 31 * result + mName.hashCode();
        result = 31 * result + (mWebUrl != null ? mWebUrl.hashCode() : 0);
        result = 31 * result + mRatingTruncated.hashCode();

        return result;
    }


    public JSONObject toJSON() {
        try {
            final JSONObject json = new JSONObject();
            json.put(Constants.ID, mId);
            json.put(Constants.NAME, mName);

            if (hasCompetitionValues()) {
                json.put(Constants.RANK, mRank);
                json.put(Constants.RATING, mRating);
            }

            return json;
        } catch (final JSONException e) {
            // this should never happen
            throw new RuntimeException(e);
        }
    }


    @Override
    public String toString() {
        return getName();
    }


    public static final Comparator<Player> ALPHABETICAL_ORDER = new Comparator<Player>() {
        @Override
        public int compare(final Player p0, final Player p1) {
            return p0.getName().compareToIgnoreCase(p1.getName());
        }
    };


    public static final Comparator<Player> RANK_ORDER = new Comparator<Player>() {
        @Override
        public int compare(final Player p0, final Player p1) {
            return p0.getRank() - p1.getRank();
        }
    };




    /*
     * Code necessary for the Android Parcelable interface is below. Read more here:
     * https://developer.android.com/intl/es/reference/android/os/Parcelable.html
     */


    @Override
    public int describeContents() {
        return 0;
    }


    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        dest.writeFloat(mRating);
        dest.writeInt(mRank);
        dest.writeString(mId);
        dest.writeString(mName);
        dest.writeString(mWebUrl);
        dest.writeString(mRatingTruncated);
    }


    public static final Creator<Player> CREATOR = new Creator<Player>() {
        @Override
        public Player createFromParcel(final Parcel source) {
            return new Player(source);
        }


        @Override
        public Player[] newArray(final int size) {
            return new Player[size];
        }
    };


}
