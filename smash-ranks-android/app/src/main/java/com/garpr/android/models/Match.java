package com.garpr.android.models;


import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;

import com.garpr.android.App;
import com.garpr.android.R;
import com.garpr.android.misc.ListUtils.MonthlyComparable;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Comparator;


public class Match implements MonthlyComparable, Parcelable {


    private final Player mLoser;
    private final Player mWinner;
    private final Tournament mTournament;




    public Match(final JSONObject json, final Player player) throws JSONException {
        final Player opponent = new Player(json);
        final Result result = Result.create(json);

        switch (result) {
            case LOSE:
                mLoser = player;
                mWinner = opponent;
                break;

            case WIN:
                mLoser = opponent;
                mWinner = player;
                break;

            default:
                // this should never happen
                throw new RuntimeException();
        }

        mTournament = new Tournament(json);
    }


    public Match(final Player loser, final Player winner, final Tournament tournament) {
        mLoser = loser;
        mWinner = winner;
        mTournament = tournament;
    }


    private Match(final Parcel source) {
        mLoser = source.readParcelable(Player.class.getClassLoader());
        mTournament = source.readParcelable(Tournament.class.getClassLoader());
        mWinner = source.readParcelable(Player.class.getClassLoader());
    }


    public boolean containsPlayer(final Player player) {
        return mLoser.equals(player) || mWinner.equals(player);
    }


    @Override
    public boolean equals(final Object o) {
        final boolean isEqual;

        if (this == o) {
            isEqual = true;
        } else if (o instanceof Match) {
            final Match m = (Match) o;
            isEqual = mLoser.equals(m.getLoser()) && mTournament.equals(m.getTournament())
                    && mWinner.equals(m.getWinner());
        } else {
            isEqual = false;
        }

        return isEqual;
    }


    @Override
    public BaseDateWrapper getDateWrapper() {
        return mTournament.getDateWrapper();
    }


    public Player getLoser() {
        return mLoser;
    }


    public Player getOtherPlayer(final Player player) {
        final Player otherPlayer;

        if (player.equals(mLoser)) {
            otherPlayer = mWinner;
        } else if (player.equals(mWinner)) {
            otherPlayer = mLoser;
        } else {
            // this should never happen
            throw new RuntimeException();
        }

        return otherPlayer;
    }


    public Tournament getTournament() {
        return mTournament;
    }


    public Player getWinner() {
        return mWinner;
    }


    @Override
    public int hashCode() {
        // this method was automatically generated by Android Studio

        int result = mLoser.hashCode();
        result = 31 * result + mWinner.hashCode();
        result = 31 * result + mTournament.hashCode();

        return result;
    }


    public boolean isLoser(final Player player) {
        return mLoser.equals(player);
    }


    public boolean isWinner(final Player player) {
        return mWinner.equals(player);
    }


    @Override
    public String toString() {
        final Context context = App.getContext();
        return context.getString(R.string.x_vs_y, mWinner.getName(), mLoser.getName());
    }


    public static final Comparator<Match> CHRONOLOGICAL_ORDER = new Comparator<Match>() {
        @Override
        public int compare(final Match m0, final Match m1) {
            return m0.getTournament().getDateWrapper().getDate().compareTo(m1.getTournament().getDateWrapper().getDate());
        }
    };


    public static final Comparator<Match> REVERSE_CHRONOLOGICAL_ORDER = new Comparator<Match>() {
        @Override
        public int compare(final Match m0, final Match m1) {
            return CHRONOLOGICAL_ORDER.compare(m1, m0);
        }
    };




    /*
     * Code necessary for the Android Parcelable interface is below. Read more here:
     * https://developer.android.com/intl/es/reference/android/os/Parcelable.html
     */


    @Override
    public int describeContents() {
        return 0;
    }


    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        dest.writeParcelable(mLoser, flags);
        dest.writeParcelable(mTournament, flags);
        dest.writeParcelable(mWinner, flags);
    }


    public static final Creator<Match> CREATOR = new Creator<Match>() {
        @Override
        public Match createFromParcel(final Parcel source) {
            return new Match(source);
        }


        @Override
        public Match[] newArray(final int size) {
            return new Match[size];
        }
    };


}
