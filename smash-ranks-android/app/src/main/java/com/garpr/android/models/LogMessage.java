package com.garpr.android.models;


import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;

import com.garpr.android.App;
import com.garpr.android.R;
import com.garpr.android.misc.Utils;


public class LogMessage implements Parcelable {


    private final int mPriority;
    private final long mId;
    private final String mMessage;
    private final String mStackTrace;
    private final String mTag;
    private final String mThrowableMessage;




    private void throwIfPriorityIsInvalid() throws IllegalArgumentException {
        if (mPriority != Log.DEBUG && mPriority != Log.WARN && mPriority != Log.ERROR) {
            throw new IllegalArgumentException("mPriority must be either Log.DEBUG (" + Log.DEBUG
                    + "), Log.WARN (" + Log.WARN + "), or Log.ERROR (" + Log.ERROR + ')');
        }
    }


    public LogMessage(final int priority, final long id, final String tag, final String message,
            final String stackTrace, final String throwableMessage) throws IllegalArgumentException {
        mPriority = priority;
        throwIfPriorityIsInvalid();

        mId = id;
        mTag = tag;
        mMessage = message;
        mStackTrace = stackTrace;
        mThrowableMessage = throwableMessage;
    }


    private LogMessage(final Parcel source) {
        mPriority = source.readInt();
        throwIfPriorityIsInvalid();

        mId = source.readLong();
        mMessage = source.readString();
        mStackTrace = source.readString();
        mTag = source.readString();
        mThrowableMessage = source.readString();
    }


    @Override
    public boolean equals(final Object o) {
        final boolean isEqual;

        if (this == o) {
            isEqual = true;
        } else if (o instanceof LogMessage) {
            final LogMessage lm = (LogMessage) o;

            if (mPriority == lm.getPriority() && mId == lm.getId() &&
                    mMessage.equals(lm.getMessage()) && mTag.equals(lm.getTag())) {
                if (isThrowable() && lm.isThrowable()) {
                    isEqual = mStackTrace.equals(lm.getStackTrace()) &&
                            mThrowableMessage.equals(lm.getThrowableMessage());
                } else if (!isThrowable() && !lm.isThrowable()) {
                    isEqual = true;
                } else {
                    isEqual = false;
                }
            } else {
                isEqual = false;
            }
        } else {
            isEqual = false;
        }

        return isEqual;
    }


    public long getId() {
        return mId;
    }


    public String getMessage() {
        return mMessage;
    }


    public int getPriority() {
        return mPriority;
    }


    public String getStackTrace() {
        return mStackTrace;
    }


    public String getTag() {
        return mTag;
    }


    public String getThrowableMessage() {
        return mThrowableMessage;
    }


    @Override
    public int hashCode() {
        // this method was automatically generated by Android Studio

        int result = mPriority;
        result = 31 * result + (int) (mId ^ (mId >>> 32));
        result = 31 * result + mMessage.hashCode();
        result = 31 * result + (mStackTrace != null ? mStackTrace.hashCode() : 0);
        result = 31 * result + mTag.hashCode();
        result = 31 * result + (mThrowableMessage != null ? mThrowableMessage.hashCode() : 0);

        return result;
    }


    public boolean isPriorityDebug() {
        return mPriority == Log.DEBUG;
    }


    public boolean isPriorityError() {
        return mPriority == Log.ERROR;
    }


    public boolean isPriorityWarn() {
        return mPriority == Log.WARN;
    }


    public boolean isThrowable() {
        return Utils.validStrings(mStackTrace, mThrowableMessage);
    }


    @Override
    public String toString() {
        final Context context = App.getContext();
        return context.getString(R.string.x_colon_y, mTag, mMessage);
    }




    /*
     * Code necessary for the Android Parcelable interface is below. Read more here:
     * https://developer.android.com/intl/es/reference/android/os/Parcelable.html
     */


    @Override
    public int describeContents() {
        return 0;
    }


    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        dest.writeInt(mPriority);
        dest.writeLong(mId);
        dest.writeString(mMessage);
        dest.writeString(mStackTrace);
        dest.writeString(mTag);
        dest.writeString(mThrowableMessage);
    }


    public static final Creator<LogMessage> CREATOR = new Creator<LogMessage>() {
        @Override
        public LogMessage createFromParcel(final Parcel source) {
            return new LogMessage(source);
        }


        @Override
        public LogMessage[] newArray(final int size) {
            return new LogMessage[size];
        }
    };


}
