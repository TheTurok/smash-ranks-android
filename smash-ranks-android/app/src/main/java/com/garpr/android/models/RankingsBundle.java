package com.garpr.android.models;


import android.os.Parcel;
import android.os.Parcelable;

import com.garpr.android.misc.Constants;
import com.garpr.android.misc.Utils;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Locale;


public class RankingsBundle implements Parcelable {


    private final ArrayList<Player> mRankings;
    private final DateWrapper mDateWrapper;




    public RankingsBundle(final JSONObject json) throws JSONException {
        final JSONArray rankingsJSON = json.getJSONArray(Constants.RANKING);
        final int rankingsLength = rankingsJSON.length();
        mRankings = new ArrayList<>(rankingsLength);

        for (int i = 0; i < rankingsLength; ++i) {
            final JSONObject playerJSON = rankingsJSON.getJSONObject(i);
            final Player player = new Player(playerJSON);
            mRankings.add(player);
        }

        final String time = json.optString(Constants.TIME);

        if (Utils.validStrings(time)) {
            try {
                mDateWrapper = new DateWrapper(time);
            } catch (final ParseException e) {
                throw new JSONException("Exception when parsing rankings date: " +
                        time + "\". " + e.getMessage());
            }
        } else {
            mDateWrapper = null;
        }
    }


    private RankingsBundle(final Parcel source) {
        mDateWrapper = source.readParcelable(BaseDateWrapper.class.getClassLoader());
        mRankings = source.createTypedArrayList(Player.CREATOR);
    }


    @Override
    public boolean equals(final Object o) {
        final boolean isEqual;

        if (this == o) {
            isEqual = true;
        } else if (o instanceof RankingsBundle) {
            final RankingsBundle rb = (RankingsBundle) o;

            if (mRankings.equals(rb.getRankings())) {
                if (hasDateWrapper() && rb.hasDateWrapper()) {
                    isEqual = mDateWrapper.equals(rb.getDateWrapper());
                } else if (!hasDateWrapper() && !rb.hasDateWrapper()) {
                    isEqual = true;
                } else {
                    isEqual = false;
                }
            } else {
                isEqual = false;
            }
        } else {
            isEqual = false;
        }

        return isEqual;
    }


    public ArrayList<Player> getRankings() {
        return mRankings;
    }


    public DateWrapper getDateWrapper() {
        return mDateWrapper;
    }


    public boolean hasDateWrapper() {
        return mDateWrapper != null;
    }


    @Override
    public int hashCode() {
        // this method was automatically generated by Android Studio

        int result = mRankings.hashCode();
        result = 31 * result + (mDateWrapper != null ? mDateWrapper.hashCode() : 0);

        return result;
    }




    public static final class DateWrapper extends BaseDateWrapper implements Parcelable {


        private static final SimpleDateFormat DATE_PARSER;


        static {
            DATE_PARSER = new SimpleDateFormat(Constants.RANKINGS_DATE_FORMAT, Locale.getDefault());
        }


        private DateWrapper(final String date) throws ParseException {
            super(DATE_PARSER, date);
        }


        private DateWrapper(final Parcel source) {
            super(source);
        }


        public static final Creator<DateWrapper> CREATOR = new Creator<DateWrapper>() {
            @Override
            public DateWrapper createFromParcel(final Parcel source) {
                return new DateWrapper(source);
            }


            @Override
            public DateWrapper[] newArray(final int size) {
                return new DateWrapper[size];
            }
        };


    }




    /*
     * Code necessary for the Android Parcelable interface is below. Read more here:
     * https://developer.android.com/intl/es/reference/android/os/Parcelable.html
     */


    @Override
    public int describeContents() {
        return 0;
    }


    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        dest.writeParcelable(mDateWrapper, flags);
        dest.writeTypedList(mRankings);
    }


    public static final Creator<RankingsBundle> CREATOR = new Creator<RankingsBundle>() {
        @Override
        public RankingsBundle createFromParcel(final Parcel source) {
            return new RankingsBundle(source);
        }


        @Override
        public RankingsBundle[] newArray(final int size) {
            return new RankingsBundle[size];
        }
    };


}
